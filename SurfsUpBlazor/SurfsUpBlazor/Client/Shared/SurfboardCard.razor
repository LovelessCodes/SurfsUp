@using SurfsUpBlazor.Shared
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IToastService toastService

<div class="card" style="width: 18rem;">
    @if (Status == "Card")
    {
        <img src="@Surfboard.ImageUrl" class="card-img-top" alt="...">
        <div class="card-body">
            <h5 class="card-title">@Surfboard.Name</h5>
            <p class="card-text">@Surfboard.Type</p>
        </div>
        <div class="card-body">
            <div class="btn-group" role="group" aria-label="Button Group">
                @if (UserId != null && UserId == Surfboard.ApplicationUserId) {
                    <button type="button" class="btn btn-primary" @onclick="UpdateSurfboard">Update</button>
                    <button type="button" class="btn btn-primary" @onclick="DeleteSurfboard">Delete</button>
                }
                <button type="button" class="btn btn-primary" @onclick="BookSurfboard">Book</button>
            </div>
        </div>
    }
    @if (Status == "Book")
    {
        <div class="modal fade show" id="bookModal" tabindex="-1" role="dialog" aria-labelledby="bookModal" aria-hidden="true" style="display:flex;">
            <div class="modal-dialog" role="document">
                <div class="modal-content rounded-4 shadow">
                    <div class="modal-header border-bottom-0">
                        <h1 class="modal-title fs-5">Confirm Booking</h1>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="GoBackToCard"></button>
                    </div>
                    <div class="modal-body py-0">
                        <img src="@Surfboard.ImageUrl" class="card-img-top" alt="...">
                        <div class="card-body">
                            <h5 class="card-title">@Surfboard.Name</h5>
                            <p class="card-text">@Surfboard.Type</p>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Length</span> @Surfboard.Length</li>
                            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Width</span> @Surfboard.Width</li>
                            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Volume</span> @Surfboard.Volume</li>
                            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Thickness</span> @Surfboard.Thickness</li>
                            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Price</span> @Surfboard.Price</li>
                        </ul>
                        <div class="card-body">
                            <p>Start Date and Time</p>
                            <input type="date" @bind-value="Start.date" class="form-control">
                            <input type="time" @bind-value="Start.time" class="form-control">
                            <p>End Date and Time</p>
                            <input type="date" @bind-value="End.date" class="form-control">
                            <input type="time" @bind-value="End.time" class="form-control">
                            <div class="btn-group" role="group" aria-label="Button Group">
                                <button type="button" class="btn btn-primary" @onclick="ConfirmBook">Book</button>
                                <button type="button" class="btn btn-primary" @onclick="GoBackToCard">Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
    @if (Status == "Delete")
    {
        <img src="@Surfboard.ImageUrl" class="card-img-top" alt="...">
        <div class="card-body">
            <h5 class="card-title">@Surfboard.Name <span class="badge bg-secondary opacity-50">Delete</span></h5>
            <p class="card-text">@Surfboard.Type</p>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Length</span> @Surfboard.Length</li>
            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Width</span> @Surfboard.Width</li>
            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Volume</span> @Surfboard.Volume</li>
            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Thickness</span> @Surfboard.Thickness</li>
            <li class="list-group-item"><span class="badge bg-secondary opacity-50">Price</span> @Surfboard.Price</li>
        </ul>
        <div class="card-body">
            <div class="btn-group" role="group" aria-label="Button Group">
                <button type="button" class="btn btn-primary" @onclick="ConfirmDelete">Confirm</button>
                <button type="button" class="btn btn-primary" @onclick="GoBackToCard">Cancel</button>
            </div>
        </div>
    }
    @if (Status == "Update")
    {
        <img src="@Surfboard.ImageUrl" class="card-img-top" alt="...">
        <div class="card-body">
            <h5 class="card-title">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-Title">Title</span>
                    </div>
                    <input type="text" class="form-control" @bind-value="@Surfboard.Name" placeholder="Name" aria-label="Name" aria-describedby="basic-Name">
                </div>
                <span class="badge bg-secondary opacity-50">Update</span>
            </h5>
            <p class="card-text">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-Type">Type</span>
                    </div>
                    <input type="text" class="form-control" @bind-value="@Surfboard.Type" placeholder="Type" aria-label="Type" aria-describedby="basic-Type">
                </div>
            </p>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-Length">Length</span>
                    </div>
                    <input type="text" class="form-control" @bind-value="@Surfboard.Length" placeholder="Length" aria-label="Length" aria-describedby="basic-Length">
                </div>
            </li>
            <li class="list-group-item">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-Width">Width</span>
                    </div>
                    <input type="text" class="form-control" @bind-value="@Surfboard.Width" placeholder="Width" aria-label="Width" aria-describedby="basic-Width">
                </div>
            </li>
            <li class="list-group-item">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-Volume">Volume</span>
                    </div>
                    <input type="text" class="form-control" @bind-value="@Surfboard.Volume" placeholder="Volume" aria-label="Volume" aria-describedby="basic-Volume">
                </div>
            </li>
            <li class="list-group-item">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-Volume">Thickness</span>
                    </div>
                    <input type="text" class="form-control" @bind-value="@Surfboard.Thickness" placeholder="Thickness" aria-label="Thickness" aria-describedby="basic-Thickness">
                </div>
            </li>
            <li class="list-group-item">
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-Volume">Price</span>
                    </div>
                    <input type="text" class="form-control" @bind-value="@Surfboard.Price" placeholder="Price" aria-label="Price" aria-describedby="basic-Price">
                </div>
            </li>
        </ul>
        <div class="card-body">
            <div class="btn-group" role="group" aria-label="Button Group">
                <button type="button" class="btn btn-primary" @onclick="ConfirmUpdate">Confirm</button>
                <button type="button" class="btn btn-primary" @onclick="GoBackToCard">Cancel</button>
            </div>
        </div>
    }
</div>
@code
{
    [Parameter]
    public EventCallback<Surfboard> RemoveMeFromList { get; set; }
    [Parameter]
    public Surfboard Surfboard { get; set; } = new Surfboard();
    public Surfboard BeforeUpdate { get; set; } = new Surfboard();
    private string Status { get; set; } = "Card";
    private Rental Rental { get; set; } = new Rental();
    private ClaimsPrincipal? User { get; set; }
    private string? UserId { get; set; }

    public class TimeSample
    {
        public DateTime date { get; set; } = DateTime.Now;
        public DateTime time { get; set; } = DateTime.Now;
        public DateTime combined { get { return date.Date + time.TimeOfDay; } }
    }

    private TimeSample Start = new TimeSample();
    private TimeSample End = new TimeSample();

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user != null)
        {
            User = user;
            UserId = User.FindFirst(u => u.Type.Contains("sub"))?.Value;
        }
    }

    private void BookSurfboard()
    {
        if (UserId == null) {
            return;
        }
        Status = "Book";
    }
    
    private async Task ConfirmBook()
    {
        if (UserId == null || Surfboard.ApplicationUserId == UserId)
        {
            return;
        }
        Rental.StartDate = Start.combined;
        Rental.EndDate = End.combined;
        Rental.ApplicationUserId = UserId;
        //Booking.SurfboardId = Surfboard.Id;
        var response = await Http.PostAsJsonAsync<Rental>("/Api/Rentals", Rental);
        if (response.IsSuccessStatusCode)
        {
            toastService.ShowInfo("You've just booked " + Surfboard.Name + " ...");
            Status = "Card";
            return;
        }
		toastService.ShowError("Something went wrong, please try again later.");
        Status = "Card";
        return;
    }

    private void UpdateSurfboard()
    {
        if (UserId == null || Surfboard.ApplicationUserId != UserId)
        {
            return;
        }
        Status = "Update";
        BeforeUpdate = (Surfboard)Surfboard.Clone();
    }

    private void DeleteSurfboard()
    {
        if (UserId == null || Surfboard.ApplicationUserId != UserId)
        {
            return;
        }
        Status = "Delete";
    }
    
    private async Task ConfirmDelete()
    {
        if (UserId == null || Surfboard.ApplicationUserId != UserId)
        {
            return;
        }
        var response = await Http.DeleteAsync($"/Api/Surfboards?id={Surfboard.Id}");
        if (response.IsSuccessStatusCode)
        {
            Status = "Card";
            await RemoveMeFromList.InvokeAsync(Surfboard);
			toastService.ShowInfo("You've just deleted " + Surfboard.Name + " ...");
            return;
        }
		toastService.ShowError("Something went wrong...");
        Status = "Card";
        return;
    }
    
    private void GoBackToCard()
    {
        Status = "Card";
    }
    
    private async Task ConfirmUpdate()
    {
        if (UserId == null || Surfboard.ApplicationUserId != UserId)
        {
            return;
        }
        var response = await Http.PutAsJsonAsync<Surfboard>($"/Api/Surfboards", Surfboard);
        if (response.IsSuccessStatusCode)
        {
            toastService.ShowInfo("You've just updated " + Surfboard.Name + " ...");
            Status = "Card";
            GoBackToCard();
            return;
        }
		toastService.ShowError("Something went wrong...");
        Status = "Card";
        Surfboard = (Surfboard)BeforeUpdate.Clone();
        return;
    }
}
