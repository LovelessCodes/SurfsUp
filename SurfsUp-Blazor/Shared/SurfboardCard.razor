@using SurfsUp_Models;
@inject HttpClient Http

<div class="card" style="width: 18rem;">
    @if (Status == "Card")
    {
        <img src="" class="card-img-top" alt="...">
        <div class="card-body">
            <h5 class="card-title">Card title</h5>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">Image=@Surfboard.Title</li>
            <li class="list-group-item">Title=@Surfboard.Type</li>
            <li class="list-group-item">Length=@Surfboard.Length</li>
            <li class="list-group-item">Width=@Surfboard.Width</li>
            <li class="list-group-item">Volume=@Surfboard.Volume</li>
            <li class="list-group-item">Thickness=@Surfboard.Thickness</li>
            <li class="list-group-item">Price=@Surfboard.Price</li>
            <li class="list-group-item">Equipment=@Surfboard.Equipment</li>

        </ul>
        <div class="card-body">
            <button class="btn btn-primary" @onclick="UpdateSurfboard">Update Surboard</button>
            <button class="btn btn-primary" @onclick="DeleteSurfboard">Delete Surfboard</button>
        </div>
    }
    @if (Status == "Delete")
    {
        <img src="" class="card-img-top" alt="...">
        <div class="card-body">
            <h5 class="card-title">Confirm Deletion</h5>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">Title=@Surfboard.Title</li>
            <li class="list-group-item">Type=@Surfboard.Type</li>
            <li class="list-group-item">Length=@Surfboard.Length</li>
            <li class="list-group-item">Width=@Surfboard.Width</li>
            <li class="list-group-item">Volume=@Surfboard.Volume</li>
            <li class="list-group-item">Thickness=@Surfboard.Thickness</li>
            <li class="list-group-item">Price=@Surfboard.Price</li>
            <li class="list-group-item">Equipment=@Surfboard.Equipment</li>

        </ul>
        <div class="card-body">
            <button class="btn btn-primary" @onclick="ConfirmDelete">Confirm</button>
            <button class="btn btn-primary" @onclick="GoBackToCard">Cancel</button>
        </div>
    }
    @if (Status == "Update")
    {
        <img src="" class="card-img-top" alt="...">
        <div class="card-body">
            <h5 class="card-title">Update</h5>
            <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item"><input @bind-value="Surfboard.Title" /></li>
            <li class="list-group-item"><input @bind-value="Surfboard.Type" /></li>
            <li class="list-group-item"><input @bind-value="Surfboard.Length" /></li>
            <li class="list-group-item"><input @bind-value="Surfboard.Width" /></li>
            <li class="list-group-item"><input @bind-value="Surfboard.Volume" /></li>
            <li class="list-group-item"><input @bind-value="Surfboard.Thickness" /></li>
            <li class="list-group-item"><input @bind-value="Surfboard.Price" /></li>
            <li class="list-group-item"><input @bind-value="Surfboard.Equipment" /></li>
        </ul>
        <div class="card-body">
            <button class="btn btn-primary" @onclick="ConfirmUpdate">Confirm</button>
            <button class="btn btn-primary" @onclick="GoBackToCard">Cancel</button>
        </div>
    }
</div>
@code 
{
    [Parameter]
    public EventCallback<Surfboard> RemoveMeFromList { get; set; }
    [Parameter]
    public Surfboard Surfboard { get; set; }
    public Surfboard BeforeUpdate { get; set; }
    public string Status { get; set; } = "Card";

    private void UpdateSurfboard()
    {
        Status = "Update";
        BeforeUpdate = (Surfboard)Surfboard.Clone();
    }

    private void DeleteSurfboard()
    {
        Status = "Delete";
    }
    private async Task ConfirmDelete()
    {
        Status = "Card";
        var response = await Http.DeleteAsync($"/Surfboards/Delete?id={Surfboard.Id}");
        if (response.IsSuccessStatusCode)
        {
            await RemoveMeFromList.InvokeAsync(Surfboard);
        }
    }
    private void GoBackToCard()
    {
        Status = "Card";
    }
    private async Task ConfirmUpdate()
    {
        Status = "Card";
        var response = await Http.PutAsJsonAsync<Surfboard>($"/Surfboards/Update?id={Surfboard.Id}", Surfboard);
        if (response.IsSuccessStatusCode)
        {
            GoBackToCard();
            return;
        }
        Surfboard = (Surfboard)BeforeUpdate.Clone();
        return;
    }
}
